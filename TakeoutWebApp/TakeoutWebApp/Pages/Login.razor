@page "/login"
@inject NavigationManager NavigationMenager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvid
@* @inject Grpc.Net.Client.GrpcChannel Channel *@

@inject Takeout.TakeOutService.TakeOutServiceClient client

<h3>Login</h3>

<EditForm Model="user" OnSubmit="HandleLogin">
	<div class="form-group">
		<lable for="username">Username</lable>
		<InputText id="username" @bind-Value="user.Username" class="form-control"></InputText>
	</div>
	<div class="form-group">
		<lable for="password">Password</lable>
		<InputText id="password" @bind-Value="user.Password" type="password" class="form-control" wi></InputText>
	</div>
	<div>
		<label></label>
	</div>
	<div>
		<button type="submit" class="btn btn-primary" style='float:inline-start;'>Login</button>
	</div>
	<div>
		<NavLink href="/register" style='float:right;'>Register</NavLink>
	</div>
</EditForm>

@code {
	private Shared.User user = new Shared.User();

	private async void HandleLogin()
	{

		HashAlgorithm hashAlgorithm = SHA512.Create();
		var hashedData = hashAlgorithm.ComputeHash(Encoding.ASCII.GetBytes(user.Password));

		var reply = await client.SigninRestaurantAsync(new Signin.RestaurantSigninRequest { Restaurantname = user.Username, Password = BitConverter.ToString(hashedData) });
		if (reply.Outcome)
		{
			var userInfo = await client.GetRestaurantInfoAsync(new Signin.RestaurantInfoRequest { RestaurantId = reply.RestaurantId });
			await LocalStorage.SetItemAsync<string>("username", userInfo.RestaurantName);
			await LocalStorage.SetItemAsync<int>("RestaurantId", reply.RestaurantId);
			await LocalStorage.SetItemAsync<float>("Longitude", userInfo.RestaurantLocation.Longitude);
			await LocalStorage.SetItemAsync<float>("Latitude", userInfo.RestaurantLocation.Latitude);
			await AuthStateProvid.GetAuthenticationStateAsync();
			NavigationMenager.NavigateTo("");
			return;
		}
		Console.WriteLine("Login unnsuccesfull");
	}
}
