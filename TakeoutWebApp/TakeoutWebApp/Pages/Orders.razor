@inject Takeout.TakeOutService.TakeOutServiceClient client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@page "/orders"
@inject HttpClient Http

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>


<AuthorizeView>
    <NotAuthorized>
        Sign in to see orders.
    </NotAuthorized>
    <Authorized>
        @* <p>This component demonstrates fetching data from the server.</p> *@
        @if (orders.Count == 0)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table" id="ordersTabel">
                <thead>
                    <tr>
                        <th>Order Date</th>
                        <th>Ordered Items</th>
                        <th>Delivery Location</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr>
                            <td>@order.OrderDate.ToDateTime().ToShortDateString()</td>
                            <td>@getDishesNames(order)</td>
                            <td>@order.DeliveryLocation.Latitude.ToString(numberCulture)  @order.DeliveryLocation.Longitude.ToString(numberCulture)</td>
                            <td>
                                <InputSelect id="department" @bind-Value=@order.OrderStatus>
                                    @foreach (int stat in STATUS_VALUE)
                                    {
                                        <option value="@stat">@stat</option>
                                    }
                                </InputSelect>
                            </td>
                            <td><button type="button" @onclick="() => SetStatus(order)" class="btn btn-primary" style='float:inline-start;'>SetStatus</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <button id="btnGetOrdersData" @onclick="GetOrderss" class="btn btn-primary" style='float:inline-start;'> Refresh Orders List</button>
    </Authorized>
</AuthorizeView>

@code {
    public System.Globalization.CultureInfo numberCulture = new System.Globalization.CultureInfo("en-US");
    private List<Dish.ProtoOrder> orders = new List<Dish.ProtoOrder>();
    private readonly int[] STATUS_VALUE = { 0, 1, 2, 3 };
    protected override async Task OnInitializedAsync()
    {
        await GetOrderss();
    }

    private async void SetStatus(Dish.ProtoOrder order)
    {
        if ((await client.SetOrderStatusAsync(new Dish.setOrderStatusRequest {OrderId = order.OrderId, OrderStatus = order.OrderStatus })).Outcome)
        {
            await GetOrderss();
        }
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public TimeOnly time { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("OrdersInterop.refreshOrdersData");
    }

    private string getDishesNames(Dish.ProtoOrder order)
    {
        string dishesNames = "";
        foreach(var dish in order.Dishes)
        {
            dishesNames += $"{dish.DishName}, ";
        }
        return dishesNames.Substring(0, dishesNames.Length - 2);
    }

    // This method will be called on button click.
    protected async Task GetOrderss()
    {
        var reply = await client.GetAllOrdersAsync(new Dish.allOrdersRequest { RestaurantId = await LocalStorage.GetItemAsync<int>("RestaurantId") });
        orders =  new List<Dish.ProtoOrder>();
        foreach(var order in reply.Orders)
        {
            Console.WriteLine("Updated Orders");
            order.OrderStatus = (int)order.OrderStatus;
            orders.Add(order);
        }
        StateHasChanged();
        Console.WriteLine(orders.Count);
        Console.WriteLine("Updated Orders");
    }
}
