@page "/orders"
@inject HttpClient Http

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>


<AuthorizeView>
    <NotAuthorized>
        Sign in to see orders.
    </NotAuthorized>
    <Authorized>
        @* <p>This component demonstrates fetching data from the server.</p> *@
        @if (forecasts == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Order Date</th>
                        <th>Ordered Items</th>
                        <th>Delivery Location</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.time.ToShortTimeString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>
                                <InputSelect id="department" @bind-Value="some_chosen">
                                    @foreach (string stat in STATUS_VALUE)
                                    {
                                        <option value="@stat">@stat</option>
                                    }
                                </InputSelect>
                            </td>
                            <td><button type="button" @onclick="() => ShowPosition(forecast.time.ToShortTimeString())" class="btn btn-primary" style='float:inline-start;'>SetStatus</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
</AuthorizeView>

@code {
    private WeatherForecast[]? forecasts;
    string some_chosen = "ddddd";
    private readonly string[] STATUS_VALUE = { "Accepted", "Being Prepared", "On The Way", "Delivered" };
    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    private void ShowPosition(string time)
    {
        Console.WriteLine(some_chosen);
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public TimeOnly time { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
